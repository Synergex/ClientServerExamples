import System
import System.Collections
import System.ComponentModel
import System.Data
import System.Drawing
import System.Text
import System.Windows.Forms
import spc2011

.array 0
namespace ClientApp
	
	public partial class Form1 extends System.Windows.Forms.Form
		
		svr				,@SynergyServer, ^null
		isConnected		,boolean
		savedContact	,@Contact
		savedGrfa		,[#]byte
		msg				,@string
		
		public method Form1
			endparams
		proc
			begin
				this.InitializeComponent()
				gridCustomers.AutoGenerateColumns = false
				gridContacts.AutoGenerateColumns = false
				svr = new SynergyServer()
				try
				begin
					svr.connect()
					isConnected = true
				end
				catch (ex, @Exception)
				begin
					MessageBox.Show(ex.Message)
					this.Close()
				end
				endtry
				savedGrfa = new byte[10] 
			end
		endmethod
		
		private method Form1_Load, void
			sender, @object 
			e, @EventArgs 
			endparams
		proc
			begin
				data c, @ArrayList, new ArrayList()
				try
				begin
					svr.GetAllCustomers(c)
					gridCustomers.DataSource = c
					;; If we have customers then load the contacts for the one that is now selected
					if (gridCustomers.SelectedRows.Count > 0)
					begin
						data tmpCustomer, @Customer
						tmpCustomer = (Customer)gridCustomers.Rows[gridCustomers.SelectedRows[0].Index].DataBoundItem
						loadContacts(tmpCustomer.Customer_id)
					end
				end
				catch (ex, @Exception)
				begin
					MessageBox.Show(ex.Message)
					this.Close()
				end
				endtry
			end
		endmethod
		
		private method gridCustomers_RowEnter, void
			sender, @object 
			e, @DataGridViewCellEventArgs 
			endparams
		proc
			begin
				if (gridCustomers.SelectedRows.Count > 0)
				begin
					displayBlankContact()
					data al, @ArrayList
					data c, @Customer
					al = (ArrayList)gridCustomers.DataSource
					c = (Customer)al[gridCustomers.SelectedRows[0].Index]
					loadContacts(c.Customer_id)
				end
			end
		endmethod
		
		private method loadContacts, void
			customer_id, int 
			endparams
		proc
			begin
				data c, @ArrayList, new ArrayList()
				try
				begin
					svr.GetCustomerContacts(customer_id, c)
					gridContacts.DataSource = c
					;; If we have a selected contact then display it
					if (gridContacts.SelectedRows.Count > 0)
					begin
						savedContact = (Contact)gridContacts.Rows[gridContacts.SelectedRows[0].Index].DataBoundItem
						try
						begin
							svr.GetContactForUpdate(savedContact.Customer_id, savedContact.Contact_id, savedContact, savedGrfa, msg)
							displaySavedContact()
						end
						catch (ex, @Exception)
						begin
						end
						endtry
					end
				end
				catch (ex, @Exception)
				begin
					MessageBox.Show(ex.Message)
				end
				endtry
			end
		endmethod
		
		private method gridContacts_RowEnter, void
			sender, @object 
			e, @DataGridViewCellEventArgs 
			endparams
		proc
			begin
				if (gridContacts.SelectedRows.Count > 0)
				begin
					savedContact = (Contact)gridContacts.Rows[e.RowIndex].DataBoundItem
					;; Get the latest version of the contact, and it's current GRFA
					data currentContact, @Contact, new Contact()
					try
					begin
						svr.GetContactForUpdate(savedContact.Customer_id, savedContact.Contact_id, currentContact, savedGrfa, msg)
						savedContact = currentContact
						;; Update the contact in the grids datasource
						data contacts, @ArrayList
						contacts = (ArrayList)gridContacts.DataSource
						contacts[e.RowIndex] = currentContact
						displaySavedContact()
					end
					catch (ex, @Exception)
					begin
						MessageBox.Show(ex.Message)
						this.Close()
					end
					endtry
				end
			end
		endmethod
		
		private method btnOK_Click, void
			sender, @object 
			e, @EventArgs 
			endparams
		proc
			begin
				saveContact()
			end
		endmethod
		
		private method btnCancel_Click, void
			sender, @object 
			e, @EventArgs 
			endparams
		proc
			begin
				displaySavedContact()
				allowSave = false
			end
		endmethod
		
		private method exitToolStripMenuItem_Click, void
			sender, @object 
			e, @EventArgs 
			endparams
		proc
			begin
				this.Close()
			end
		endmethod
		
		private method Form1_FormClosed, void
			sender, @object 
			e, @FormClosedEventArgs 
			endparams
		proc
			begin
				if (isConnected)
				begin
					try
					begin
						svr.disconnect()
					end
					catch (ex, @Exception)
					begin
					end
					endtry
				end
			end
		endmethod
		
		private method displaySavedContact, void
			endparams
		proc
			begin
				txtFirstName.Text = savedContact.First_name
				txtLastName.Text = savedContact.Last_name
				txtFullName.Text = savedContact.Friendly_name
				txtPrefix.Text = savedContact.Salutation
				txtTitle.Text = savedContact.Title
				txtDepartment.Text = savedContact.Department
				if (savedContact.Work_phone != 0) then
					txtWorkPhone.Text = savedContact.Work_phone.ToString()
				else
					txtWorkPhone.Text = ""
				if (savedContact.Mobile_phone != 0) then
					txtMobilePhone.Text = savedContact.Mobile_phone.ToString()
				else
					txtMobilePhone.Text = ""
				if (savedContact.Home_phone != 0) then
					txtHomePhone.Text = savedContact.Home_phone.ToString()
				else
					txtHomePhone.Text = ""
				if (savedContact.Fax != 0) then
					txtFax.Text = savedContact.Fax.ToString()
				else
					txtFax.Text = ""
				txtWebSite.Text = savedContact.Web_site
				txtEmail.Text = savedContact.Email
				chkManagementContact.Checked = savedContact.Management_contact
				chkBillingContact.Checked = savedContact.Billing_contact
				chkSalesContact.Checked = savedContact.Sales_contact
				chkTechnicalContact.Checked = savedContact.Technical_contact
				chkGeneralContact.Checked = savedContact.General_contact
				allowSave = false
			end
		endmethod
		
		private method saveContact, void
			endparams
		proc
			begin
				if (!validateFormData())
					mreturn
				;; Save the new contact info locally
				savedContact.First_name = txtFirstName.Text
				savedContact.Last_name = txtLastName.Text
				savedContact.Friendly_name = txtFullName.Text
				savedContact.Salutation = txtPrefix.Text
				savedContact.Title = txtTitle.Text
				savedContact.Department = txtDepartment.Text
				if (txtWorkPhone.Text.Length > 0) then
					savedContact.Work_phone = long.Parse(txtWorkPhone.Text)
				else
					savedContact.Work_phone = 0
				if (txtMobilePhone.Text.Length > 0) then
					savedContact.Mobile_phone = long.Parse(txtMobilePhone.Text)
				else
					savedContact.Mobile_phone = 0
				if (txtHomePhone.Text.Length > 0) then
					savedContact.Home_phone = long.Parse(txtHomePhone.Text)
				else
					savedContact.Home_phone = 0
				if (txtFax.Text.Length > 0) then
					savedContact.Fax = long.Parse(txtFax.Text)
				else
					savedContact.Fax = 0
				savedContact.Web_site = txtWebSite.Text
				savedContact.Email = txtEmail.Text
				savedContact.Management_contact = chkManagementContact.Checked
				savedContact.Billing_contact = chkBillingContact.Checked
				savedContact.Sales_contact = chkSalesContact.Checked
				savedContact.Technical_contact = chkTechnicalContact.Checked
				savedContact.General_contact = chkGeneralContact.Checked
				;; Save the new data to the server
				try
				begin
					svr.UpdateContact(savedContact, savedGrfa, msg)
					;; Update the contact in the grids datasource
					data contacts, @ArrayList
					contacts = (ArrayList)gridContacts.DataSource
					contacts[gridContacts.SelectedRows[0].Index] = savedContact
					gridContacts.Refresh()
				end
				catch (ex, @Exception)
				begin
					MessageBox.Show(ex.Message)
					this.Close()
				end
				endtry
				allowSave = false
			end
		endmethod
		
		private method validateFormData, boolean
			endparams
		proc
			begin
				data retval, boolean, true
				data errorMessage, @string, ""
				if (txtFirstName.Text.Length == 0)
				begin
					errorMessage = String.Format(("{0}/nFirst name cannot be blank"), errorMessage)
					retval = false
				end
				if (txtLastName.Text.Length == 0)
				begin
					errorMessage = String.Format("{0}/nLast name cannot be blank", errorMessage)
					retval = false
				end
				if (txtWorkPhone.Text.Length > 0)
				begin
					data tmpPhone, long
					if (!long.TryParse(txtWorkPhone.Text, tmpPhone))
					begin
						errorMessage = String.Format("{0}\nWork phone must be numeric", errorMessage)
						retval = false
					end
				end
				if (txtMobilePhone.Text.Length > 0)
				begin
					data tmpPhone, long
					if (!long.TryParse(txtMobilePhone.Text, tmpPhone))
					begin
						errorMessage = String.Format("{0}\nMobile phone must be numeric", errorMessage)
						retval = false
					end
				end
				if (txtHomePhone.Text.Length > 0)
				begin
					data tmpPhone, long
					if (!long.TryParse(txtHomePhone.Text, tmpPhone))
					begin
						errorMessage = String.Format("{0}\nHome phone must be numeric", errorMessage)
						retval = false
					end
				end
				if (txtFax.Text.Length > 0)
				begin
					data tmpPhone, long
					if (!long.TryParse(txtFax.Text, tmpPhone))
					begin
						errorMessage = String.Format("{0}\nFax number must be numeric", errorMessage)
						retval = false
					end
				end
				if (!retval)
					MessageBox.Show(errorMessage, "Invalid data", MessageBoxButtons.OK, MessageBoxIcon.Information)
				mreturn retval
			end
		endmethod
		
		private method displayBlankContact, void
			endparams
		proc
			begin
				txtFirstName.Text = ""
				txtLastName.Text = ""
				txtFullName.Text = ""
				txtPrefix.Text = ""
				txtTitle.Text = ""
				txtDepartment.Text = ""
				txtWorkPhone.Text = ""
				txtMobilePhone.Text = ""
				txtHomePhone.Text = ""
				txtFax.Text = ""
				txtWebSite.Text = ""
				txtEmail.Text = ""
				chkManagementContact.Checked = false
				chkBillingContact.Checked = false
				chkSalesContact.Checked = false
				chkTechnicalContact.Checked = false
				chkGeneralContact.Checked = false
			end
		endmethod
		
		private m_allowSave, boolean
		
		private property allowSave, boolean
			method get
			proc
				begin
					mreturn m_allowSave
				end
			endmethod
			method set
			proc
				begin
					m_allowSave = value
					btnOK.Enabled = m_allowSave
					btnCancel.Enabled = m_allowSave
				end
			endmethod
		endproperty
		
		private method txtFirstName_TextChanged, void
			sender, @object 
			e, @EventArgs 
			endparams
		proc
			begin
				txtFullName.Text = String.Format("{0} {1}", txtFirstName.Text, txtLastName.Text)
				allowSave = true
			end
		endmethod
		
		private method txtLastName_TextChanged, void
			sender, @object 
			e, @EventArgs 
			endparams
		proc
			begin
				txtFullName.Text = String.Format("{0} {1}", txtFirstName.Text, txtLastName.Text)
				allowSave = true
			end
		endmethod
		
		private method fieldChanged, void
			sender, @object 
			e, @EventArgs 
			endparams
		proc
			begin
				allowSave = true
			end
		endmethod
	endclass

endnamespace

